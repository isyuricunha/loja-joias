// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  slug        String    @unique @db.VarChar(100)
  description String?   @db.Text
  icon        String?   @db.VarChar(255)
  sortOrder   Int       @default(0) @map("sort_order")
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Relations
  products    Product[]

  @@map("categories")
}

model Product {
  id            String    @id @default(cuid())
  name          String    @db.VarChar(255)
  description   String    @db.Text
  price         Decimal   @db.Decimal(10, 2)
  originalPrice Decimal?  @map("original_price") @db.Decimal(10, 2)
  materialType  MaterialType @map("material_type")
  categoryId    Int       @map("category_id")
  inStock       Boolean   @default(true) @map("in_stock")
  stockQuantity Int       @default(0) @map("stock_quantity")
  isRecommended Boolean   @default(false) @map("is_recommended")
  isFeatured    Boolean   @default(false) @map("is_featured")
  slug          String    @unique @db.VarChar(255)
  metaTitle     String?   @map("meta_title") @db.VarChar(255)
  metaDescription String? @map("meta_description") @db.Text
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  // Relations
  category      Category  @relation(fields: [categoryId], references: [id])
  images        ProductImage[]
  sizes         ProductSize[]
  recommendations Recommendation[] @relation("ProductRecommendations")
  recommendedBy   Recommendation[] @relation("RecommendedProducts")

  @@map("products")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  productId String  @map("product_id")
  imageUrl  String  @map("image_url") @db.VarChar(500)
  altText   String? @map("alt_text") @db.VarChar(255)
  isPrimary Boolean @default(false) @map("is_primary")
  sortOrder Int     @default(0) @map("sort_order")
  
  // Relations
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductSize {
  id          Int     @id @default(autoincrement())
  productId   String  @map("product_id")
  sizeName    String  @map("size_name") @db.VarChar(50)
  sizeValue   String? @map("size_value") @db.VarChar(50)
  isAvailable Boolean @default(true) @map("is_available")
  
  // Relations
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_sizes")
}

model Recommendation {
  id                    Int               @id @default(autoincrement())
  productId             String            @map("product_id")
  recommendedProductId  String            @map("recommended_product_id")
  recommendationType    RecommendationType @map("recommendation_type")
  createdAt             DateTime          @default(now()) @map("created_at")
  
  // Relations
  product               Product           @relation("ProductRecommendations", fields: [productId], references: [id], onDelete: Cascade)
  recommendedProduct    Product           @relation("RecommendedProducts", fields: [recommendedProductId], references: [id], onDelete: Cascade)

  @@unique([productId, recommendedProductId])
  @@map("recommendations")
}

enum MaterialType {
  OURO_18K    @map("ouro_18k")
  PRATA_925   @map("prata_925")
  FOLHEADO    @map("folheado")
  ACO_INOX    @map("aco_inox")
  ACO_BANHADO @map("aco_banhado")
  BIJUTERIA   @map("bijuteria")
}

enum RecommendationType {
  MANUAL     @map("manual")
  RELATED    @map("related")
  BESTSELLER @map("bestseller")
}
